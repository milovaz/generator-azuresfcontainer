pipeline {
    agent any
    tools {nodejs "node"}
    stages {
            
        stage('Git') {
          steps {
              script {
                checkoutRepository()
              }
          }
        }
        
        stage('Update artifacts') {
          steps {
            azureServiceFabricUpdateArtifacts applicationManifestPath: '<%= applicationManifestPath %>', serviceManifestPath: '<%= serviceManifestPath %>', serviceTargetVersion: "$BUILD_NUMBER", applicationTargetVersion: "$BUILD_NUMBER", credentials: 'acr-credentials' 
          }  
        }
        
        stage('Build') {
          steps{
            script {
                registry = sh (returnStdout: true, script: '''#!/bin/bash
                image_name=$(grep -oP \'<ImageName>\\K[^<]*\' <%= serviceManifestPath %>)
                echo $image_name''').trim()
            }
            script {
                dockerImage = docker.build registry
            }
          }
        }
        
        stage('Deploy Image') {
          steps{
             script {
                docker.withRegistry('https://moeda3.azurecr.io', 'acr-credentials') {
                dockerImage.push()
              }
            }
          }
        }
        
        stage('Deploy to service fabric') {
           steps {
                azureServiceFabricPublish applicationName: 'fabric:/<%= appName %>', applicationType: "<%= appTypeName %>", azureCredentialsId: '', clientCert: "$JENKINS_HOME/cert.pem", clientKey: "$JENKINS_HOME/key_unencrypted.pem", configureType: 'fill', managementHost: 'moeda-cluster.brazilsouth.cloudapp.azure.com', manifestPath: '<%= applicationManifestPath %>', resourceGroup: '', serviceFabric: '', environmentType: "$GIT_BRANCH"
           }
        }
        
        stage('Inform Deploy') {
          steps {
            informGitDeployment(env.REPO_OWNER, env.REPO_NAME, env.DEPLOYMENT_ID)
          }  
        }
    }
    post {
        always {
            sendFeedbackToSlack '@thiagomilo'      
        }
    }
}